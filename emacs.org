#+AUTHOR: wfj
#+EMAIL: wufangjie1223@126.com
#+OPTIONS: ^:{} \n:t email:t
#+HTML_HEAD_EXTRA: <style type="text/css"> body {padding-left: 26%; background: #e3edcd;} #table-of-contents {position: fixed; width: 25%; height: 100%; top: 0; left: 0; overflow-y: scroll; resize: horizontal;} i {color: #666666;} pre, pre.src:before {color: #ffffff; background: #131926;} </style>
#+HTML_HEAD_EXTRA: <script type="text/javascript"> function adjust_html(){document.getElementsByTagName("body")[0].style.cssText="padding-left: "+(parseInt(document.getElementById("table-of-contents").style.width)+5)+"px; background: #e3edcd;"}; window.onload=function(){document.getElementById("table-of-contents").addEventListener("mouseup",adjust_html,true)}</script>
#+HTML_HEAD_EXTRA: <style type="text/css"> mjx-mspace {white-space: normal;} </style>

* tricks
** sudo
打开文件时, 在文件名前加 /sudo:: 即可以 sudo 打开

** 不太常用但很有用的命令
| 快捷键      | 命令                   | 说明                                 |
|-------------+------------------------+--------------------------------------|
| M-;         |                        | 注释和反注释                         |
| C-/         | undo                   | 还有其他快捷键, 但这个就够了         |
| M-!         | shell-command          |                                      |
| C-s C-s     |                        | 查找上一次确定的查找, C-g 取消的不算 |
| C-r C-r     |                        | 同上, 方向不同                       |
|             | erase-buffer           | 清空当前 buffer                      |
|             | flush-lines RET regexp | 按正则表达式删除行                   |
| ESC ESC ESC |                        | 有什么 C-g 终止不了的, 就用这个      |
|             | man                    | 如果不用 eshell 而是其他, 可以一用   |
|             | hl-line-mode           |                                      |
| C-o         | open-line              | 在该行上方插入一行, 光标上移         |

** ediff and vc-ediff
*** ediff
M-x ediff-buffers 或 ediff 开启对比, (仅 linux 可用)
此时会出现一个新的 frame (右上角提示) 可进行如下操作:
| 竖线 | 切换模式 (上下对比 / 左右对比) |
| ?    | 帮助                           |
| q    | 退出                           |
| j    | 移动到第一个差异处             |
| n/p  | 上/下一个差异区域              |
| V/v  | 上/下滚屏                      |
| !号  | 更新修改, 类似 revert-buffer   |
| C-l  | 居中                           |
|------+--------------------------------|
|      | 其他功能暂时用不倒             |

*** vc-ediff
光标在所在文件 buffer, 或者不想加条件可以直接用 vc-version-ediff
| 无前缀 | 工作区和版本库的区别            |
| 有前缀 | 分两次输入 comment_id, 进行比较 |

** 控制字符
| C-q | (qouted-insert ARG) | Read next input character and insert it |
#+BEGIN_EXAMPLE

#+END_EXAMPLE

** 输入重复的数字
重复字符很简单, 但要输入重复数字, 不查资料, 还真想不到怎么做:
C-digits C-u digit-your-want-to-repeat

** 矩形区域编辑 (rectangle-mark-mode)
C-x SPACE 移动
26+ 版本, 选择区域比原来 (以头尾两行的最大宽度定) 人性化了

** comint
https://www.masteringemacs.org/article/comint-writing-command-interpreter

** paragraph
| M-{ | M-[, backward-paragraph |
| M-} | M-], forward-paragraph  |
| M-h | mark-paragraph          |

#+BEGIN_SRC emacs-lisp
"\f\\|[ \t]*$" ; paragraph-start
; \f 是分页转义, 在 emacs 显示为 ^L (即按键为 control-L)
"^[ \t\f]*$" ; paragraph-separate
#+END_SRC

M-h 联按的方式很受益, 自己写了如下的函数, 但为了让自己更熟练使用
paragarph 移动的方式, 暂时不加入 .emacs
#+BEGIN_SRC emacs-lisp
(defun mark-paragraph (&optional arg allow-extend)
  (interactive "p\np")
  (unless arg (setq arg 1))
  (when (zerop arg)
    (error "Cannot mark zero paragraphs"))
  (cond ((and allow-extend
	      (or (and (eq last-command this-command) (mark t))
		  (and transient-mark-mode mark-active)))
	 (if (> (point) (mark))
	     (forward-paragraph arg)
	   (backward-paragraph arg)))
	(t
	 (backward-paragraph arg)
	 (push-mark nil t t)
	 (forward-paragraph arg))))
(global-set-key (kbd "M-h") 'mark-paragraph)
#+END_SRC

* org-mode
** 用大纲 (outline) 组织内容
| 快捷键 | 说明                       |
|--------+----------------------------|
| S-TAB  | 循环切换整个文档的大纲状态 |
| TAB    | 循环切换光标所在大纲的状态 |

** 插入代码
| <s+tab | 后接 sh python emacs-lisp org sql conf 等 |
| <e+tab | EXAMPLE 其中内容完全按照 plain text 显示  |
语法高亮需要在 .emacs 文件中加 (setq org-src-fontify-natively t)

** 表格
*** 创建和转换表格
手动输入 | 或 |- 配合 tab 逐步创建

*** 调整和区域移动
| 快捷键  | 说明                           |
|---------+--------------------------------|
| C-c C-c | 调整表格，不移动光标           |
| Tab     | 移动到下一区域，必要时新建一行 |
| S-Tab   | 移动到上一区域                 |
| RET     | 移动到下一行，必要时新建一行   |

*** 编辑行和列
| 快捷键         | 说明                             |
|----------------+----------------------------------|
| M-LEFT/RIGHT   | 移动列(分隔线属于前一列)         |
| M-UP/DOWN      | 移动行                           |
| M-S-LEFT/RIGHT | 删除当前列/在当前列前插入一列    |
| M-S-UP/DOWN    | 删除当前行/在当前行前插入一行    |
| C-c ^          | 根据当前列排序，可以选择排序方式 |
| C-c -          | 添加水平分割线                   |
| C-c RET        | 添加水平分割线并跳到下一行       |

** 列表
org 能够识别有序列表, 无序列表和描述列表
- 无序列表以 '-', '+' 或 '*' (不能顶格)开头, 这些符号可以混用
+ 有序列表以 '1.' 或 '1)' 开头
- 描述列表用 '::' 将项和描述分开, 这个还没搞明白
- 有序列表和无序列表都以缩进表示层级, 相同的缩进表示同一级

** 数学公式
输入 \ 然后 M-x pcomplete, 会弹出特殊字符 buffer
语法类似 mathjax 和 latex, 有的可能需要用 $ 包围

** 文字修饰
详见 M-x describe-variable org-emphasis-alist
*加粗*
_下划线_
/斜体/
+删除+

** 分隔线
五条短线或以上显示为分隔线
-----

** 导出
配置详见我的 my-org.el
快捷键 C-c C-e 之后根据需要导出的类型选择
+ html
+ pdf
+ slide (beamer)
*** beamer
TODO: 用过几次, 当时没做笔记, 以后再用的时候再修改该内容
FIXME: 第一次 C-c C-e 会没有选项, 需要 M-x org-beamer-export-to-pdf 一下

#+BEAMER_THEME: Madrid
右下角导航:
1. 同滚轮
2. 整页翻
3.4. 正向是按 outline

TODO: :BEAMER_ENV: againframe 效果

** 别的地方用 org 表格
M-x orgtbl-mode (再次输入关闭) (org-table minor mode)
NOTE: 开了这个模式的话, 自动补全的回车选中就失灵了 (直接回车), 而且 jedi 跳转速度有时候会很慢, 反正要用的时候再开就好

* eshell
为什么选择 eshell
+ +配合 outline-minor-mode 使用, 效果极佳+
+ man 命令会在一个新的 buffer 打开帮助文档 (这个可以用 M-x man 代替)
+ 受限查找 (匹配前缀)
+ 历史记录管理较容易 (过滤等)
+ prompt 是 read-only (有利有弊)
+ 跨平台 (其实 windows 下功能也很有限)
- 命令长度限制太小 (4096?), 使用 pipeline 时会有问题

| 快捷键  | 命令                   | 说明                              |
|---------+------------------------+-----------------------------------|
| C-c C-n | eshell-next-prompt     |                                   |
| C-c C-p | eshell-previous-prompt |                                   |
|---------+------------------------+-----------------------------------|
|         | sort-lines             |                                   |
|         | reverse-region         |                                   |
|         | delete-duplicate-lines | 保留第一个, 前缀 C-u 保留最后一个 |

* dired-mode
直接 C-x C-f 打开文件夹, 也会进入 dired-mode, 很好用
| 快捷键  | 命令                         | 说明                                  |
|---------+------------------------------+---------------------------------------|
| C-x d   | dired                        |                                       |
| C-x C-q |                              | 取消只读, 用来修改文件名              |
| C-c C-c |                              | 用来确认上述修改                      |
|---------+------------------------------+---------------------------------------|
| j       | dired-goto-file              | 利用 minibuffer 的补全功能跳转        |
| k       | dired-do-kill-lines          | 隐藏标记的文件                        |
| g       | revert-buffer                | 更新 buffer                           |
| s       | dired-sort-toggle-or-edit    | 已重写, 按 ls 的参数展示, 详见 .emacs |
| (       | dired-hide-details-mode      |                                       |
| y       | dired-show-file-type         |                                       |
| q       | quit-window                  | 有前缀才能删除 buffer, 不如用 C-x k   |
|---------+------------------------------+---------------------------------------|
| d       | dired-flag-file-deletion     |                                       |
| x       | dired-do-flagged-delete      |                                       |
| DEL     | dired-unmark-backward        | 在标记的下一行使用                    |
| u       | dired-unmark                 | 在标记行使用                          |
| U       | dired-unmark-all-marks       |                                       |
| m       | dired-mark                   |                                       |
| t       | dired-toggle-marks           |                                       |
| % d     | dired-flag-files-regexp      |                                       |
| % m     | dired-mark-files-regexp      |                                       |
|---------+------------------------------+---------------------------------------|
| M       | dired-do-chmod               |                                       |
| O       | dired-do-chown               |                                       |
| G       | dired-do-chgrp               |                                       |
| H       | dired-do-hardlink            |                                       |
| S       | dired-do-symlink             |                                       |
| C       | dired-do-copy                |                                       |
| R       | dired-do-rename              | mv                                    |
| D       | dired-do-delete              |                                       |
|---------+------------------------------+---------------------------------------|
| Z       | dired-do-compress            | 解压或压缩, **TODO**                  |
| RET     | dired-find-file              | 已重写, 详见 .emacs                   |
| o       | dired-find-file-other-window |                                       |
| C-o     | dired-display-file           | like o, but not move cursor           |
| ^       | dired-up-directory           |                                       |
| <       | dired-prev-dirline           |                                       |
| >       | dired-next-dirline           |                                       |
| +       | dired-create-directory       |                                       |

标记命令都能加数字前缀, 表示运行多次, 不实用, 直接选中区域再执行相应命令更方便
| 一些可能有用的变量        |
|---------------------------|
| dired-recursive-copies    |
| dired-recursive-deletes   |
| delete-by-moving-to-trash |
| dired-sort-inhibit        |

* ibuffer
| 快捷键  | 命令                                | 说明                        |
|---------+-------------------------------------+-----------------------------|
| C-x C-b | ibuffer                             | global kbd in .emacs        |
|---------+-------------------------------------+-----------------------------|
| d       | ibuffer-mark-for-delete             | 这块和 dired-mode 完全相同  |
| x       | ibuffer-do-kill-on-deletion-marks   |                             |
| u       | ibuffer-unmark-forward              |                             |
| DEL     | ibuffer-unmark-backward             |                             |
| o       | ibuffer-visit-buffer-other-window   |                             |
| C-o     |                                     |                             |
| g       | ibuffer-update                      |                             |
| m       | ibuffer-mark-forward                |                             |
| t       | ibuffer-toggle-marks                |                             |
| j       | ibuffer-jump-to-buffer              |                             |
| U       |                                     | 重绑定为 ibuffer-unmark-all |
|---------+-------------------------------------+-----------------------------|
| C-d     | ibuffer-mark-for-delete-backwards   |                             |
|---------+-------------------------------------+-----------------------------|
| s s     | ibuffer-do-sort-by-size             |                             |
| s f     | ibuffer-do-sort-by-filename/process | Filename/Process            |
| s i     | ibuffer-invert-sorting              | Size                        |
| s m     | ibuffer-do-sort-by-major-mode       | Mode                        |
| s a     | ibuffer-do-sort-by-alphabetic       | Name                        |
| s v     | ibuffer-do-sort-by-recency          | buffer 创建时间             |
|---------+-------------------------------------+-----------------------------|
| % f     | ibuffer-mark-by-file-name-regexp    |                             |
| % m     | ibuffer-mark-by-mode-regexp         |                             |
| % n     | ibuffer-mark-by-name-regexp         |                             |

相比 list-buffers, filename 和 process 显示地更好
相比 dired-mode, mark 要注意以下几点:
1. dired-mode 需要 mark 一些文件进行统一操作, 比如 chmod 等, 感觉这对 buffers 来说只有删除这一个选择
2. 无法选中进行 mark
3. 删除 buffer 时的提示很烦人, 修改源码中的 :dangerous t, 然后重新 byte-compile-file 即可

* python-mode
** python-mode 的一些说明
emacs25 之后 C-c C-s 和 C-c C-r 不再能够调用 run-python,
需要先 C-c C-p 才行, 而且 C-c C-p 之前需要加 prefix command
才能调出 dedicated process
emacs24.5 C-c C-c 等带前缀的话, 可以让 if __name__ == '__main__' 块内的代码运行, 默认不运行

** 补全
python mode 的文件如果有打开解释器的话, 按 ESC -> TAB, 会在 *Completions* buffer 打开所有的补全, 就像在解释器里直接按 TAB 一样
如果不想依托于文件就打开解释器, 可以直接 M-x run-python

** emacs python-mode 卡顿原因查找
M-x profiler-start 做那些很卡的操作
M-x profiler-report 看结果, 发现是字体高亮的问题

** 修改
基于以上原因, 我对 python-mode 作了一些修改:

*** 打开文件
M-x describe-function RET python-shell-send TAB 通过链接进入文件所在位置,
C-v 加 /sudo:: 前缀重新打开

*** 修改
+ 注释 assignment 部分 (特别慢)
+ 给所有赋值操作符 font-lock-builtin-face
+ 添加, 修改了几个关键词

*** 编译
当前buffer, M-x byte-compile-file RET python.el.gz 无报错则成功

* term-mode
M-x term 可以跑一个 fully functional 的 terminal, (我是在研究如何用 windows 下的 emacs 跑 ubuntu on windows 的 shell 时, 找资料发现的, 可惜的是 windows 下的 terminal 都不能用这个模式)
很长一段时间我以为是所有的 emacs 快捷键都没用了, 那还怎么玩 (M-x 都不行)
其实不是, term-mode 有两种输入模式 line-mode 和 char-mode
简单来说 line-mode 就是普通的 emacs buffer, 按回车生效, char-mode 输入的每个字符都直接发送给终端, 所以 emacs 的快捷键都失效了 (除了 C-c 前缀的, 如下), 默认的就是 char-mode
| C-c C-j | term-line-mode        | char-mode 很少有生效的按键, 实现为 toggle |
| C-c C-k | term-char-mode        | 谁设计的快捷键这么难记                    |
|---------+-----------------------+-------------------------------------------|
| C-c C-c | term-interrupt-subjob |                                           |
| C-c C-z | term-stop-subjob      |                                           |
| C-c C-p | term-previous-prompt  |                                           |
| C-c C-n | term-next-prompt      |                                           |
NOTE: 其实我也不太在意多按一个回车键, 和 emacs 全局快捷键相比不值一提, 就把默认的改成 line-mode 了

* emacs for mysql
配置详见 emacs_init/my-sql.el
0. 运行 M-x sql-mysql
1. 密码设好了的话就不用再输密码了, 直接回车就行
2. 因为有 history 存在, 可以在输入界面 M-p/n 选择历史记录
3. 需要打开多个的话加前缀再 M-x
4. sql-mysql-options -A 表示关闭表名字段名的 auto-completion, 我试了默认情况也不能补全, 可能是用法不对
5. 虽然开始时要输入数据库名, 但进入之后还是可以用 use database_name; 改变
6. 常用操作, 如下:
| C-c C-c | comint-interrupt-subjob |
| C-c C-z | comint-stop-subjob      |
| C-c C-p | comint-previous-prompt  |
| C-c C-n | comint-next-prompt      |
| C-c M-o | comint-clear-buffer     |
| M-n     | comint-previous-input   |
| M-p     | comint-next-input       |

NOTE: 如果多行复制过来运行的话, 别忘了最后加分号

* regular expression
|       |                         |                              |
|-------+-------------------------+------------------------------|
|       | re-builder              | string (use \\ instead of \) |
| C-M-s | isearch-forward-regexp  |                              |
| C-M-r | isearch-backward-regexp |                              |

1. ^ $ . * + ? [ ] ( ) { } \ | [-], 作用和一般正则表达式基本相同, 不支持零宽断言等高级语法
2. 相同
| \w \W | 匹配任何构成词的字符, 由语法表决定   |
| \1    | 匹配捕获                             |
| \b \B | 匹配空串, 但仅在一个词的开始或结尾处 |
| \< \> | 匹配空串, 但仅在一个词的开始或结尾处 |
3. 与一般正则表达式区别
+ 大小写不敏感
+ ( ) { } | 匹配字符时不用转义, 特殊字符时反而要转义
+ \ 在 [] 中不是特殊字符, 比如 "[\n]" (字符串转义) 而不是 "[\\n]" (匹配 \ 或 n)
+ \d \D 不能匹配数字
+ ^ $ 匹配行首和行尾, \` \' 匹配 buffer 的头和尾
+ \sC \SC, C in {w(\w), -(\s),  (\s), .(普通标点符号)}
+ \cC \CC, C 详见 M-x describe-categories

* why shortcuts did not work
** system shortcuts conflict
Linux is customizable, while windows is hard to modify, but tricks still exist (for example when default language is English, C-SPC can set mark, while chinese can't).

** other global applications, for example fcitx
这些快捷键比 emacs 拥有更高的优先级, 输入法显然也是

这个问题困扰了我很久, 机缘巧合才发现的, C-5, C-M-p, C-M-s C-M-b 等等快捷键, 可以在 fcitx configuration 中清空所有非必要的快捷键

NOTE: Keyboard - English (US) (Unavailable) 也有快捷键, 起不起作用就不知道了
NOTE: 按 ESC 清空
NOTE: 所有的修改都保存在 ~/.config/fcitx (有一次出现了数字键选择词语就会崩溃, 删除这个文件夹就行了)

* package-install
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+END_SRC

** install jedi
*** 安装 virtualenv
#+BEGIN_SRC sh
sudo pip3 install virtualenv # 注意用 sudo, 不然找不到
#+END_SRC

*** 安装 exec-path-from-shell (只有 mac 需要此步骤)
M-x package-install RET exec-path-from-shell

*** 安装 jedi
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC

M-x package-refresh-contents
M-x package-install RET jedi RET
M-x jedi:install-server

*** 添加 jedi 的搜索路径到 .emacs
#+BEGIN_SRC emacs-lisp
(setq jedi:server-args
      '("--sys-path" "/usr/lib/python3/dist-packages"
	"--sys-path" "/usr/local/lib/python3.4/dist-packages"
	"--sys-path" "/home/wfj/packages"))
#+END_SRC

*** 快捷键和命令
| 快捷键  | 命令                            | 特殊说明                      |
|---------+---------------------------------+-------------------------------|
| .       | jedi:dot-complete               | (setq jedi:complete-on-dot t) |
| <C-tab> | jedi:complete                   |                               |
| C-c ,   | jedi:goto-definition-pop-marker | forward                       |
| C-c .   | jedi:goto-definition            | backward                      |
| C-c ?   | jedi:show-doc                   |                               |
| C-c d   | jedi:show-doc                   | (setq jedi:setup-keys t)      |
|---------+---------------------------------+-------------------------------|
| C-,     | jedi:goto-definition-pop-marker | not recommend                 |
| C-.     | jedi:goto-definition            | not recommend                 |

** install rustic
+ lsp-mode (install before rustic)
+ flycheck
+ rustic
+ company
+ +yasnippet+

M-x lsp-install-server ret rust-analyzer ret

保存在 ~/.emacs.d/.cache/lsp/rust/

** install htmlize
* TODO list
对写代码来说可能没什么大用, 但感觉还是有很多潜在的用途, 学习一下
#+SEQ_TODO: FIXME(m) | FIXED(f)
#+SEQ_TODO: TODO(T!) | DONE(D@)  CANCELED(C@/!)
https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-MML-AM_CHTML
http://orgmode.org/mathjax/MathJax.js

** eww
可以说是最好用的夜间模式了, 但是还有很多问题, 无法达到实际实用的程度, 比如 org-mode 导出的网页, mathjax 渲染, 图片排版等等
